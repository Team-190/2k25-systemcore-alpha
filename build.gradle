plugins {
    id "java"
    id "edu.wpi.first.GradleRIO2027" version "2027.0.0-alpha-1"
    id "com.peterabeles.gversion" version "1.10"
    id "io.freefair.lombok" version "8.4"
    id "com.diffplug.spotless" version "6.12.0"
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

def ROBOT_MAIN_CLASS = "frc.robot.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        systemcore(getTargetTypeClass('SystemCore')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                    jvmArgs.add("-XX:+UnlockExperimentalVMOptions")
                    jvmArgs.add("-XX:GCTimeRatio=5")
                    jvmArgs.add("-XX:+UseSerialGC")
                    jvmArgs.add("-XX:MaxGCPauseMillis=50")

                    // The options below may improve performance, but should only be enabled on the RIO 2

                    final MAX_JAVA_HEAP_SIZE_MB = 100;
                    jvmArgs.add("-Xmx" + MAX_JAVA_HEAP_SIZE_MB + "M")
                    jvmArgs.add("-Xms" + MAX_JAVA_HEAP_SIZE_MB + "M")
                    jvmArgs.add("-XX:+AlwaysPreTouch")

                    // Enable VisualVM connection
                    // jvmArgs.add("-Dcom.sun.management.jmxremote=true")
                    // jvmArgs.add("-Dcom.sun.management.jmxremote.port=1198")
                    // jvmArgs.add("-Dcom.sun.management.jmxremote.local.only=false")
                    // jvmArgs.add("-Dcom.sun.management.jmxremote.ssl=false")
                    // jvmArgs.add("-Dcom.sun.management.jmxremote.authenticate=false")
                    // jvmArgs.add("-Djava.rmi.server.hostname=10.1.90.2") // Replace TE.AM with team number
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/systemcore/deploy'
                    deleteOldFiles = true // Change to true to delete files on systemcore that no
                    // longer exist in deploy directory of this project
                }
            }
        }
    }
}

// Grab the roboRIO comment via SSH
// import com.jcraft.jsch.*

// ext {
//     // RoboRIO SSH details
//     roboRIOHost = 'roboRIO-190-FRC.local' // Replace with your team number
//     roboRIOUser = 'admin'                 // Default user
//     roboRIOPassword = ''                  // Default password
//     machineInfoFile = '/etc/machine-info' // Path to the file to read
// }

// task checkRoboRIOtoRobotType {
//     dependsOn compileJava
//     doLast {
//         def ROBORIO_COMMENT = fetchNameUsingJSch(
//                 roboRIOHost, roboRIOUser, roboRIOPassword, machineInfoFile
//                 )
//         println "RoboRIO Name: ${ROBORIO_COMMENT}"

//         // Ensure the build output directory is in the classpath
//         def buildOutputDir = file('build/classes/java/main')
//         URLClassLoader loader = new URLClassLoader([
//             buildOutputDir.toURI().toURL()
//         ] as URL[], this.class.classLoader)

//         // Set file path names and constants
//         def robotTypeClassName = 'frc.robot.Constants$RobotType'
//         def constantsClassName = 'frc.robot.Constants'
//         def robotType = null
//         def constantsClass = null
//         def robotFieldName = 'ROBOT'

//         try {
//             // Load the class from the extended classloader
//             robotType = loader.loadClass(robotTypeClassName)
//             println "Loaded class: ${robotType.name}"

//             def constants = robotType.enumConstants
//             println "Enum constants: ${constants.collect { it.name() }}"

//         } catch (ClassNotFoundException e) {
//             println "Error: Class ${robotTypeClassName} not found. ${e.message}"
//         }

//         // Check for valid name of roboRIO comment
//         boolean foundMatch = false
//         for (enumConstant in robotType.enumConstants) {
//             if (enumConstant.toString().equalsIgnoreCase(ROBORIO_COMMENT)) {
//                 foundMatch = true
//                 break // Exit the loop once a match is found
//             }
//         }

//         if (foundMatch) {
//             println "Match found for possible RobotType"
//         } else {
//             throw new GradleException("Error: '${ROBORIO_COMMENT}' is not a valid RobotType\nTo Fix: Enter valid RoboRIO comment of valid RobotType in file '${machineInfoFile}' or via Webserver!")
//         }

//         try {
//             // Load the class from the extended classloader
//             constantsClass = loader.loadClass(constantsClassName)
//             println "Loaded class: ${constantsClass.name}"

//         } catch (ClassNotFoundException e) {
//             println "Error: Class ${constantsClassName} not found. ${e.message}"
//         }

//         // Get the ROBOT field
//         def robotField = constantsClass.getDeclaredField(robotFieldName)
//         robotField.setAccessible(true)

//         // Get the value of the ROBOT field
//         def robotEnumValue = robotField.get(null) // For static fields, pass `null`
//         println "Declared ROBOT in Constants.java: ${robotEnumValue}"

//         // Compare roboRIO name with ROBOT value
//         if (ROBORIO_COMMENT.equalsIgnoreCase(robotEnumValue.name())) {
//             println "The roboRIO name matches the ROBOT value in Constants.java!"
//         } else {
//             throw new GradleException("Mismatch! The RoboRIO comment '${ROBORIO_COMMENT}' does not match the ROBOT value '${robotEnumValue.name()}'\nTo Fix: Match RoboRIO comment to ROBOT in file '${constantsClassName}'")
//         }

//     }
// }

// // Function to fetch the file content using JSch
// def fetchNameUsingJSch(host, user, password, remoteFile) {
//     def session = null
//     def channel = null
//     try {
//         JSch jsch = new JSch()
//         session = jsch.getSession(user, host, 22)
//         session.setPassword(password)

//         // Skip strict host key checking for simplicity
//         session.setConfig("StrictHostKeyChecking", "no")

//         // Connect to the session
//         session.connect()

//         // Open an exec channel to run the command
//         channel = session.openChannel("exec")
//         def command = "cat ${remoteFile}"
//         channel.setCommand(command)

//         // Capture the output
//         def inputStream = channel.inputStream
//         channel.connect()

//         def output = inputStream.text.trim()
//         if (output.isEmpty()) {
//             throw new GradleException("Failed to fetch data from ${remoteFile}")
//         }

//         // Extract the name within quotes if the output contains PRETTY_HOSTNAME
//         def matcher = output =~ /PRETTY_HOSTNAME="(.+?)"/
//         if (matcher.find()) {
//             return matcher.group(1) // The name within quotes
//         } else {
//             throw new GradleException("RoboRIO Comment is Empty in file '${remoteFile}'\nTo Fix: Add RoboRIO Comment in file '${remoteFile}' or via Webserver!")
//         }
//     } catch (Exception e) {
//         throw new GradleException("Error during SSH connection: ${e.message}", e)
//     } finally {
//         if (channel != null) {
//             channel.disconnect()
//         }
//         if (session != null) {
//             session.disconnect()
//         }
//     }
// }

// deploysystemcore.dependsOn(checkRoboRIOtoRobotType)


def deployArtifact = deploy.targets.systemcore.artifacts.frcJava

// Set to true to use debug for JNI.
wpi.java.debugJni = false

// Set this to true to enable desktop support.
def includeDesktopSupport = true

// Configuration for AdvantageKit
task(replayWatch, type: JavaExec) {
    mainClass = "org.littletonrobotics.junction.ReplayWatch"
    classpath = sourceSets.main.runtimeClasspath
}

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 4.
dependencies {
    annotationProcessor wpi.java.deps.wpilibAnnotations()
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()
    implementation 'org.jgrapht:jgrapht-core:1.5.1'

    systemcoreDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.systemcore)
    systemcoreDebug wpi.java.vendor.jniDebug(wpi.platforms.systemcore)

    systemcoreRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.systemcore)
    systemcoreRelease wpi.java.vendor.jniRelease(wpi.platforms.systemcore)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    def akitJson = new groovy.json.JsonSlurper().parseText(new File(projectDir.getAbsolutePath() + "/vendordeps/AdvantageKit.json").text)
    annotationProcessor "org.littletonrobotics.akit:akit-autolog:$akitJson.version"
}

test {
    useJUnitPlatform()
    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
}

// Simulation configuration (e.g. environment variables).
wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    from sourceSets.main.allSource
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Configure jar and deploy tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

// Configure string concat to always inline compile
tasks.withType(JavaCompile) {
    options.compilerArgs.add '-XDstringConcat=inline'
}

// Create version file
project.compileJava.dependsOn(createVersionFile)
gversion {
    srcDir       = "src/main/java/"
    classPackage = "frc.robot"
    className    = "BuildConstants"
    dateFormat   = "yyyy-MM-dd HH:mm:ss z"
    timeZone     = "America/New_York"
    indent       = "  "
}

// Create commit with working changes on event branches
// task(eventDeploy) {
//     doLast {
//         if (project.gradle.startParameter.taskNames.any({ it.toLowerCase().contains("deploy") })) {
//             def branchPrefix = "event"
//             def branch = 'git branch --show-current'.execute().text.trim()
//             def commitMessage = "Update at '${new Date().toString()}'"

//             if (branch.startsWith(branchPrefix)) {
//                 exec {
//                     workingDir(projectDir)
//                     executable 'git'
//                     args 'add', '-A'
//                 }
//                 exec {
//                     workingDir(projectDir)
//                     executable 'git'
//                     args 'commit', '-m', commitMessage
//                     ignoreExitValue = true
//                 }

//                 println "Committed to branch: '$branch'"
//                 println "Commit message: '$commitMessage'"
//             } else {
//                 println "Not on an event branch, skipping commit"
//             }
//         } else {
//             println "Not running deploy task, skipping commit"
//         }
//     }
// }
// createVersionFile.dependsOn(eventDeploy)

// Spotless formatting
project.compileJava.dependsOn(spotlessApply)
spotless {
    java {
        target fileTree(".") {
            include "**/*.java"
            exclude "**/build/**", "**/build-*/**"
        }
        toggleOffOn()
        googleJavaFormat()
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
    }
    groovyGradle {
        target fileTree(".") {
            include "**/*.gradle"
            exclude "**/build/**", "**/build-*/**"
        }
        greclipse()
        indentWithSpaces(4)
        trimTrailingWhitespace()
        endWithNewline()
    }
    json {
        target fileTree(".") {
            include "**/*.json"
            exclude "**/build/**", "**/build-*/**"
        }
        gson().indentWithSpaces(2)
    }
    format "misc", {
        target fileTree(".") {
            include "**/*.md", "**/.gitignore"
            exclude "**/build/**", "**/build-*/**"
        }
        trimTrailingWhitespace()
        indentWithSpaces(2)
        endWithNewline()
    }
}
